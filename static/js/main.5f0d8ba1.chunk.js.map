{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.comoponent.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,EAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAW,iBAAhB,UACA,qBACAC,IAAM,UACNC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAEH,4BAAIL,EAAMI,QAAQC,KAClB,6BAAKL,EAAMI,QAAQE,OACjB,4BAAIN,EAAMI,QAAQG,YCHTC,G,MAAW,SAAAR,GAAK,OAC3B,sBAAKC,UAAW,YAAhB,UACAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,OAFnB,SCLWM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAY,SACZa,KAAO,SACPF,YAAeA,EACfG,SAAUF,MC2CGG,G,wDA5Cf,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAC3Bf,SAAUc,S,oBAMhB,WAAU,IAAD,OAEP,EAGIE,KAAKR,MAFPR,EADF,EACEA,SACAS,EAFF,EAEEA,YAEIQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAY,MAAjB,UACA,8CACA,cAAC,EAAD,CAAWW,YAAc,iBACzBC,aACE,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAI5C,cAAC,EAAD,CAAUvB,SAAYiB,W,GAvCVO,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5f0d8ba1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = props => (\r\n  <div className =\"card-container\">\r\n  <img\r\n  alt = \"monster\"\r\n  src={`https://robohash.org/${props.monster.id}?set=set2`}\r\n  />\r\n  <p>{props.monster.id}</p>\r\n  <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nimport { Card }  from \"../card/card.component\";\r\n\r\nimport \"./card-list.styles.css\"\r\n\r\n\r\n\r\nexport const CardList = props => (\r\n  <div className= \"card-list\">\r\n {props.monsters.map(monster => (\r\n  <Card key={monster.id} monster= {monster} />\r\n))};\r\n </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n    className = 'search'\r\n    type = \"search\"\r\n    placeholder = {placeholder}\r\n    onChange={handleChange }/>\r\n);\r\n","import React, {Component} from 'react';\r\n\r\nimport { CardList } from \"./components/card-list/card-list.comoponent\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({\r\n        monsters: users\r\n      }))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const {\r\n      monsters,\r\n      searchField\r\n    } = this.state;\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n\r\n    return (\r\n      <div className = \"App\" >\r\n      <h1>Monster Logs</h1>\r\n      <SearchBox placeholder = 'search monster'\r\n      handleChange = {\r\n        e => this.setState({searchField: e.target.value\r\n        })\r\n      }\r\n      />\r\n      <CardList monsters = {filteredMonsters} >\r\n      </CardList>\r\n      </div>)\r\n    }\r\n  }\r\n\r\n  export default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}